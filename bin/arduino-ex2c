#!/bin/bash

EX_FILE=""
EX_DIR=""

TMPL_DIR=$(dirname $0)/../share/searduino/tmpl

exit_on_failure()
{
    if [ $1 -ne 0 ]
    then
	echo "ERROR:  $2"
	exit $1
    fi
}


parse_args()
{
    export BUILD_TYPE=stub

    while [ "$1" != "" ]
    do
	case $1 in
	    "--shlib")
		BUILD_TYPE=shlib
		shift
		;;
	    "--prog")
		BUILD_TYPE=prog
		shift
		;;
	    "--uno")
		BUILD_TYPE=uno
		shift
		;;
	    "--mega")
		BUILD_TYPE=mega
		shift
		;;
	    "--due")
		BUILD_TYPE=due
		shift
		;;
	    "--searduino-path")
		MYPATH=$2
		shift
		shift
		;;
	    "--yes")
		YES=true
		shift
		;;
	    *)
#		echo "PARSE: $1"
		break
		;;
	esac	
    done
    
    if [ "$MYPATH" = "" ]
    then
	export MYPATH=$1
	export FIRST_CHAR=${MYPATH:0:1}
	echo " FIRST_CHAR: \"$FIRST_CHAR\""
	if [ "$FIRST_CHAR" = "/" ]
	then
	    MYPATH=$1/../../../../searduino
	else
	    MYPATH=$(pwd)/$1/../../../../../
	fi
    fi

    if [ "$1" = "" ]
    then
	echo "No args given"
	exit 1
    elif [ -f $1 ]
    then
	EX_FILE=$1
    elif [ -d $1 ]
    then
	EX_DIR=$1
    else
	echo "No dir or file given"
	exit 1
    fi
}


write_c_file()
{
    echo "$*" >> $C_FILE
    return $?
}

ard2c_file()
{
    cat $1 >> $C_FILE
    return $?
}

create_c_file()
{
    ARD_FILE=$1

#    echo "From $EX_FILE To $C_FILE"
    C_FILE=$(basename $ARD_FILE | sed 's,\.ino,\.c,g')
    
    if [ -f $ARD_DIR/$C_FILE ]
    then
	if [ "$YES" != "true" ] 
	then
	    echo "C file ($C_FILE) exists, do you want to overwrite? [y/N]"
	    read ANS
	    if  [ "$ANS" != "y" ] 
	    then
		echo "bailing out.."
		exit 0
	    fi
	fi
	rm -f $ARD_DIR/$C_FILE
    fi
    
    echo "  * creating $C_FILE  (from $ARD_FILE)" 

    cat $TMPL_DIR/pre_c.tmpl | sed -e  "s,__ARD_FILE__,$ARD_FILE,g" >>  $C_FILE
    exit_on_failure $? "Creating C file 1 ($C_FILE) "
    ard2c_file $ARD_FILE
    exit_on_failure $? "Creating C file 2 ($C_FILE) "
    ard2c_file $TMPL_DIR/main_c.tmpl
    exit_on_failure $? "Creating C file 3 ($C_FILE) "
    cat $TMPL_DIR/post_c.tmpl | sed -e  "s,__ARD_FILE__,$ARD_FILE,g" >>  $C_FILE
    exit_on_failure $? "Creating C file 4 ($C_FILE) "

    mv $C_FILE $ARD_DIR/
    exit_on_failure $? "Moving C file ($C_FILE) "
}


create_makefile()
{
    ARD_DIR=$1

    export ARDUINO_VALUE=""
    export TO_BUILD=""
    export TO_BUILD_TARGET=""
    export MAIN_FILE=""

    if [ "$BUILD_TYPE" = "prog" ]
    then
	ARDUINO_VALUE=stub
	TO_BUILD_TARGET="\$(PROG)"
	TO_BUILD="PROG=$(echo $ARD_DIR | tr [A-Z] [a-z])"
    elif [ "$BUILD_TYPE" = "shlib" ]
    then
	ARDUINO_VALUE=stub
	TO_BUILD_TARGET="\$(SHLIB)"
	TO_BUILD="SHLIB=lib$(echo $ARD_DIR | tr [A-Z] [a-z]).so"
    elif [ "$BUILD_TYPE" = "uno" ] || [ "$BUILD_TYPE" = "due" ] || [ "$BUILD_TYPE" = "mega" ]
    then
	ARDUINO_VALUE=$BUILD_TYPE
	TO_BUILD_TARGET=""
	TO_BUILD=""
	MAIN_FILE=$C_FILES
	C_FILES=""
    fi

#    echo "Makefile - $ARD_DIR"
    echo "  * creating Makefile" 
    cat $TMPL_DIR/Makefile.tmpl | \
          sed "s,__C_FILES__,$C_FILES,g" | \
          sed "s,__MAIN_FILE__,$MAIN_FILE,g" | \
          sed "s,__TO_BUILD__,$TO_BUILD,g" | \
          sed "s,__ALL_DEP__,$TO_BUILD_TARGET,g" | \
          sed "s,__ARDUINO_VALUE__,$ARDUINO_VALUE,g"   | \
          sed "s,__SEARDUINO_PATH__,$MYPATH,g" \
          > $ARD_DIR/Makefile
    exit_on_failure $? "Creating Makefile "

}

create_dir()
{
    ARD_DIR_LONG=$1
    ARD_DIR=$(basename $ARD_DIR_LONG)
    
    if [ -d $ARD_DIR ]
	then
	sleep 0
#	echo "Dir exists...handle later ,for now: ignoring"
    fi

    mkdir -p $ARD_DIR


    export C_FILES=""
    for i in $(find $ARD_DIR_LONG -type f -name "*.ino")
    do
#	echo "Create C file from : $i"
	create_c_file $i
	C_FILES=$C_FILE
    done

    create_makefile $ARD_DIR
}

parse_args $*



if [ "$EX_FILE" != "" ]
then
    create_c_file $EX_FILE
else
    create_dir $EX_DIR
fi

exit 0