@chapter Getting and installing Searduino

@section Required software

@subsection Debian based GNU/Linux distributions:
@itemize @bullet
@item gcc-avr
@item binutils-avr
@item avrdude
@item avrprog
@item avr-libc
@end itemize

@subsection Windows:
@itemize @bullet
@item WinAVR
@item cygwin (gcc, g++, make)
@end itemize


@section Released version of the source code 
@*
Download from 
@*
@url{http://download.savannah.gnu.org/releases/searduino/}

@subsection Installing a released version
You must first configure the makefile etc by typing:
@*
@code{./configure}
@*
@*
The configure script accepts several option. Type @code{./configure
--help} to see them.
@*
@*
and then continue with building 
@*
@*
@code{make}
@*
@*
and then continue with installating
@*
@*
@code{make install}

@i{Note: You can configure Searduino in several ways (e.g with or
without Python). See Configuring Searduino for more information}

@section Getting the latest source code

We try to keep the latest version in the repository working but
there's no guarantee. If you want to play safe use the released
versions (see above).

@subsection Getting a tgz/tar.gz file from the git repository
@*
Download from 
@*
@url{http://git.savannah.gnu.org/gitweb/?p=searduino.git;a=snapshot;h=HEAD;sf=tgz}
@*
@*
Info on how to install below

@subsection Cloning git repository
@*
Download from 
@*
@code{git clone git://git.savannah.nongnu.org/searduino.git}
@*
@*
Info on how to install below

@subsection Installing the latest version
First, create tke configure script to set up the Makefiles
@*
@code{make -f Makefile.git}
@*
@*
After this, you should follow the procedures for Installing a released version

@section Binary releases

@subsection GNU/Linux
@*
@b{Create a installation directiory (e.g /opt/searduino)}
@*
@code{mkdir -p /opt/searduino}
@*
@*
@b{Go to the installation directory}
@*
@code{cd /opt/searduino}
@*
@*
@b{Download a release from}
@*
@url{http://download.savannah.gnu.org/releases/searduino/bin/}
@*
E.g http://download.savannah.gnu.org/releases/searduino/bin/searduino-bin-0.4-x86.tar.gz
@*
@*
@b{Unpack}
@*
@code{tar zxvf searduino-bin-0.4-x86.tar.gz}
@*
@*


@section Verify installation

@subsection With Arduino examples

To verify the Searduino installation we have developed a script that:
@itemize @bullet
@item Converts Arduino examples (.ino files) to C files
@item Builds a stand alone program
@item Builds a shared library (for use in simulator)
@item Builds for all supported Arduino boards
@end itemize
@*
To use it, type:
@*
@*
@code{cd /opt/searduino}
@*
@*
@code{./bin/verify-install.sh}
@*
@*
You can upload all built program to the uno boards by adding the option @code{--upload}
@*
@*
@code{bin/verify-install.sh --upload}
@*
@*
@i{Note: this only uploads to the Uno boards, not to the other
supported boards}
@*
@*
@b{Experimental feature!!}
You can also execute each shared library in the stream simulator, by
using the option @code{--simulate}
@*
@*
@code{bin/verify-install.sh --simulate}
@*
@*
@i{Note: Since the Arduino code will execute for ever, you must stop
the simulator each time it is loaded with a shread library. You stop
the simulator by pressing pressing Ctrl-c}
@*
@*

@subsection With the digpins example

Go the the digpins example directory.
@*
@*
@code{cd /opt/searduino/share/searduino/example/digpins}
@*
@*
Make sure that the SEARDUINO_PATH in the Makefile points to your
Searduino installation dir. 
@*
@*
@*
@b{Build blinker program for PC}
@*
@*
@code{make prog}
@*
@*
@b{Execute blinker}
@*
@*
@code{./blinker}
@*
@*
The blinker program should run and print out (the printouts comes from
the stub libraries). Interrupt the program by sending a signal, e g by
pressing Ctrl-C.
@*
@*
@b{Build blinker lib for use in simulator}
@*
@*
@code{make shlib}
@*
@*
There should be a shared library file called @code{digpins.so} in the
current directory. You can load this shared library (think of it as a
plugin) in any of the simulators. We will load it in the stream
simulator.
@*
@*
@code{/opt/searduino/bin/searduino-stream-sim  --arduino-code ./digpins.so }
@*
@*
You should now see printouts from the Searduino simulator. You can
stop the program by pressing Ctrl-C ('Control key' and 'c key' at the
same time). 

@section Configuring Searduino

@subsection Python support
By default Searduino builds a Python extension and a
Simulator GUI. To disable this support, configure with the option
@code{--disable-python}:
@*
@code{./configure --disable-python}:

@*
@*
More info will come.

@subsection Enable unit tests with check
Configure with the option @code{--enable-unittest}
@*
@code{./configure --enable-unittest}:
@*
More info will come.
