\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename architecture.texi
@settitle Searduino - Manual
@c %**end of header
@afourpaper
@c @setchapternewpage odd

@include version.texi


@c Put everything in one index (arbitrarily chosen to be the concept index).
@syncodeindex fn cp
@syncodeindex ky cp
@syncodeindex pg cp
@syncodeindex vr cp


@titlepage
@sp 10
@c omment The title is printed in a large font
@c @center @titlefont{Searduino Manual}


@c @page
@vskip 0pt plus 1filll
@title Searduino Manual
@subtitle C/C++ environment
@subtitle Stubs
@subtitle Simulator
@subtitle ... for Arduino
@subtitle 
@subtitle Version: @value{VERSION} 
@subtitle Date: @value{UPDATED} 
@author Henrik Sandklef
@include searduino_copying
@end titlepage

@c @titlepage
@c @title Searduino - Manual
@c @subtitle January 2012
@c @end titlepage


@contents

@chapter Background
@include background.texi

@chapter Abbreviations
@include abbrevs.texi

@chapter Supported boards and platforms
@include supported.texi

@include download.texi

@chapter Using Searduino

In the previous chapter we looked a bit at the digpins example, so we
now have some feeling for what a Searduino Makefile contains. We will
now proceed by writing our first Arduino program using Searduino.

@section Writing the first program

@subsection The first C file
@*
@*
Open up your favorite editor (emacs?) and begin....
@*
@*
To use the Arduino functionality you need to icnlude Arduino.h, so
we need to add this to our file:
@*
@*
@code{#include <Arduino.h>}
@*
@*
When using Arduino IDE you've seen the @code{loop} function as the
starting point for the program. With Searduino we're back to the
normal C way of doing this with a @code{main} function, so we need to define a main function.
@*
@*
@code{int main(void)}
@{
@}
@*
@*
As with the loop function you're writing when you're using the Arduino IDE,
the main function needs to never exit or return. It's a simple control
loop (see @uref{http://en.wikipedia.org/wiki/Embedded_system#Simple_control_loop}).
@*
@*
So a very simple main function looks like this
@*
@*
@code{int main(void)}
@*
@{
@*
@code{  for(;;)}
@*
@code{    }
@{
@*
@code{       digitalWrite(13, 1);}
@*
@code{       delay(100);}
@*
@code{       digitalWrite(13, 0);}
@*
@code{       delay(100);}
@*
@code{   }
@}
@*
@}
@*
@*
@*
@i{Note: this program sets pin 13 high and low with 0.1 secs
interval. You don't need to connect a led to output pin 13, since
pin 13 already has a built in led on the board.}

@subsection Write the first Makefile

@b{Inporant settings in the Makefile}
@itemize @bullet
@item SEARDUINO_PATH - should be set to the directory of your
Searduino installation
@item PROG - name of the program to build
@item SRC_C - a list (separated with space) of C files to compile
@item SRC_CXX - a list (separated with space) of C++ files to compile
@item MAIN_SRC - the C (not C++) file containing the main
fuction. Should not be included in the SRC_C variable
@item ARDUINO - should be set to the type of software you want to
build (see @b{Build types} below)
@end itemize
@*
@*
@b{Include the searduino makefile}
@*
You need to include some settings, targets and rules from
Searduino. This is done by adding the following line to your Makefile.
@*
@*
@code{include $(SEARDUINO_PATH)/mk/searduino.mk}
@*
@*
@*

Note: You don't have to use the makefiles provided by Searduino. The
makefiles do however provide a lot of help (board settings etc).



@subsection Building the program for PC
To build your software to be executed on your PC:

make sure the the variable @b{ARDUINO} in the Makefile is set to
@b{stub}.


 and type:
@*
@*
@code{make clean}
@*
@code{make}
@*

To run the program
@*
@*
@code{./blinker}


@subsection Building the program for UNO
To build your software to be executed on your PC:

make sure the the variable @b{ARDUINO} in the Makefile is set to
@b{uno} and type:
@*
@*
By setting ARDUINO to uno the Searduino makefiles will use the
settings for building and uploading for the Arduino UNO board. 
@*
To build the program, all we have to do now is to type:
@*
@*
@code{make clean}
@*
@code{make}
@*
@*
@*
To upload and run the program on the Arduino UNO board:
@*
@*
@code{make upload}
@*
@*
You should now be able to see the built in led (pin 13) flash. If not,
the author of this document need to his homework.

@chapter Build for different targets

With Searduino it's (relatively) easy to compile your program for
various boards. You decide what targets to build for with the ARDUINO
variable in the Makefile. The following values of that variable are implemented.

@b{Build types}
@itemize @bullet
@item uno - builds software for the Arduino UNO board
@item mega - builds software for the Arduino Mega board
@item due - builds software for the Arduino Mega board
@item stub - builds software for the PC
@end itemize

@chapter Various Searduino functions/macros

@section print functions/macros

@chapter Simulators

With Searduino you can easily build your code with the following stubs/simulators:

@itemize @bullet
@item stub - the Arduino fuctions print whne they are being called
(stdout by default)
@item stream - same as with stub, but now also with a listening
(stdin) thread to which you can send commands (such as settig digital input
pin 2 to 1).
@item pardon - a Simulator, written in Python, using the Python
simulator interface
@item xxxx - a simulator, written in C++/Qt/Qml.
simulator interface
@end itemize

@section Stub 



@section Stub output syntax

With this mode set Searduino print messages to a stream (default to
stdout) for the function calls where some hardware is set. 
@*
@*
You switch on and off this mode as many times you want during execution using the functions:
@*
@code{void searduino_enable_streamed_output(void)}
@*
@code{void searduino_disable_streamed_output(void)}

@multitable  @columnfractions .0 .30 .20 .50
@item 
@tab @b{Directive}
@tab @b{Example}
@tab @b{Description}

@item
@tab @code{dpin:<pin>:<value>}
@tab @code{dpin:1:0}
@tab Digital output pin 1 is 0

@item
@tab @code{apin:<pin>:<value>}
@tab @code{apin:2:1.123}
@tab Analogue pin 2 is 1.123

@end multitable



@section Streamed simulator
With this mode you can enter commands to the Arduino code. To enable this code you have to call the function @code{void searduino_enable_command_reader(void)} before you call @code{void init_comm(void)}.

@subsection Streamed simulator input syntax

@multitable  @columnfractions .0 .30 .20 .50
@item 
@tab @b{Directive}
@tab @b{Example}
@tab @b{Description}

@item
@tab @code{dpin:<pin>:<value>}
@tab @code{dpin:13:1}
@tab Set digital pin 13 to 1

@item
@tab @code{apin:<pin>:<value>}
@tab @code{apin:7:1.123}
@tab Set analogue pin 7 to 1.123

@end multitable


@subsection Scripting with bash
@subsection Scripting over the network
@section Pardon simulator
@section xxx simulator

@chapter Using the Python scripting interface

@chapter Debugging Arduino code

@chapter Examples

@section Example Makefile
@*
@*
@code{SEARDUINO_PATH=/opt/searduino}
@*
@code{PROG=blinker}
@*
@code{SRC_C=blink.c}
@*
@code{SRC_CXX= stuff.cpp morestuff.cpp}
@*
@code{MAIN_SRC=main.c}
@*
@code{ARDUINO=stub}
@*
@code{$(PROG):}
@*
@code{upload:}
@*
@code{include $(SEARDUINO_PATH)/mk/searduino.mk}
@*
@section Example C code
@*
@*
@code{#include <Arduino.h>}
@*
@*
@code{int main(void)}
@*
@{
@*
@code{  for(;;)}
@*
@code{    }
@{
@*
@code{       digitalWrite(13, 1);}
@*
@code{       delay(100);}
@*
@code{       digitalWrite(13, 0);}
@*
@code{       delay(100);}
@*
@code{   }
@}
@*
@}
@*
@chapter Write your own simulator
@subsection Writing a simulator in C/C++ 



@subsection Writing a simulator in Python
For now, we would like to refer to pardon in the Searduino source
treee for en example on how to write a simulator in Python.
@bye


