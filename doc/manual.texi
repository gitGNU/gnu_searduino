\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename architecture.texi
@settitle Searduino - Manual
@c %**end of header
@afourpaper
@c @setchapternewpage odd

@include version.texi


@c Put everything in one index (arbitrarily chosen to be the concept index).
@syncodeindex fn cp
@syncodeindex ky cp
@syncodeindex pg cp
@syncodeindex vr cp


@titlepage
@sp 10
@c omment The title is printed in a large font
@c @center @titlefont{Searduino Manual}


@c @page
@vskip 0pt plus 1filll
@title Searduino Manual
@subtitle C/C++ environment
@subtitle Stubs
@subtitle Simulator
@subtitle ... for Arduino
@subtitle 
@subtitle Version: @value{VERSION} 
@subtitle Date: @value{UPDATED} 
@author Henrik Sandklef
@include searduino_copying
@end titlepage

@c @titlepage
@c @title Searduino - Manual
@c @subtitle January 2012
@c @end titlepage


@contents

@chapter Background
@include background.texi

@chapter Abbreviations
@include abbrevs.texi

@chapter Supported boards and platforms
@include supported.texi

@include download.texi

@chapter Using Searduino

In the previous chapter we looked a bit at the digpins example, so we
now have some feeling for what a Searduino Makefile contains. We will
now proceed by writing our first Arduino program using Searduino.

@section Writing the first program

@subsection The first C file
@*
@*
Open up your favorite editor (emacs?) and begin....
@*
@*
To use the Arduino functionality you need to icnlude Arduino.h, so
we need to add this to our file:
@*
@*
@code{#include <Arduino.h>}
@*
@*
When using Arduino IDE you've seen the @code{loop} function as the
starting point for the program. With Searduino we're back to the
normal C way of doing this with a @code{main} function, so we need to define a main function.
@*
@*
@code{int main(void)}
@{
@}
@*
@*
As with the loop function you're writing when you're using the Arduino IDE,
the main function needs to never exit or return. It's a simple control
loop (see @uref{http://en.wikipedia.org/wiki/Embedded_system#Simple_control_loop}).
@*
@*
So a very simple main function looks like this
@*
@*
@code{int main(void)}
@*
@{
@*
@code{  for(;;)}
@*
@code{    }
@{
@*
@code{       digitalWrite(13, 1);}
@*
@code{       delay(100);}
@*
@code{       digitalWrite(13, 0);}
@*
@code{       delay(100);}
@*
@code{   }
@}
@*
@}
@*
@*
@*
@i{Note: this program sets pin 13 high and low with 0.1 secs
interval. You don't need to connect a led to output pin 13, since
pin 13 already has a built in led on the board.}

@subsection Write the first Makefile

@b{Inporant settings in the Makefile}
@itemize @bullet
@item SEARDUINO_PATH - should be set to the directory of your
Searduino installation
@item PROG - name of the program to build
@item SRC_C - a list (separated with space) of C files to compile
@item SRC_CXX - a list (separated with space) of C++ files to compile
@item MAIN_SRC - the C (not C++) file containing the main
fuction. Should not be included in the SRC_C variable
@item ARDUINO - should be set to the type of software you want to
build (see @b{Build types} below)
@end itemize
@*
@*
@b{Include the searduino makefile}
@*
You need to include some settings, targets and rules from
Searduino. This is done by adding the following line to your Makefile.
@*
@*
@code{include $(SEARDUINO_PATH)/mk/searduino.mk}
@*
@*
@*

Note: You don't have to use the makefiles provided by Searduino. The
makefiles do however provide a lot of help (board settings etc).



@subsection Building the program for PC
To build your software to be executed on your PC:

make sure the the variable @b{ARDUINO} in the Makefile is set to
@b{stub}.


 and type:
@*
@*
@code{make clean}
@*
@code{make}
@*

To run the program
@*
@*
@code{./blinker}


@subsection Building the program for UNO
To build your software to be executed on your PC:

make sure the the variable @b{ARDUINO} in the Makefile is set to
@b{uno} and type:
@*
@*
By setting ARDUINO to uno the Searduino makefiles will use the
settings for building and uploading for the Arduino UNO board. 
@*
To build the program, all we have to do now is to type:
@*
@*
@code{make clean}
@*
@code{make}
@*
@*
@*
To upload and run the program on the Arduino UNO board:
@*
@*
@code{make upload}
@*
@*
You should now be able to see the built in led (pin 13) flash. If not,
the author of this document need to his homework.

@chapter Build for different targets

With Searduino it's (relatively) easy to compile your program for
various boards. You decide what targets to build for with the ARDUINO
variable in the Makefile. The following values of that variable are implemented.

@b{Build types}
@itemize @bullet
@item uno - builds software for the Arduino UNO board
@item mega - builds software for the Arduino Mega board
@item due - builds software for the Arduino Mega board
@item stub - builds software for the PC
@end itemize

@chapter Various Searduino functions/macros
Searduino provides a small set of macros for you. When building for
your local computer they are enabled, and when building for the
Arduino hw they are diabled.

@section print functions/macros
@*
coming soon
@section pause/resume macros 
@*
coming soon

@chapter Simulators

With Searduino you can easily build your code for use with:

@itemize @bullet
@item stubed program - the Arduino fuctions print when they are being called
(stdout by default)
@item stream - same as with stub, but now also with a listening
(stdin) thread to which you can send commands (such as settig digital input
pin 2 to 1).
@item pardon - a Simulator, written in Python, using the Python
simulator interface (pearduino)
@item python scripts - your own Python scripts, using the Python
simulator interface (pearduino)
@item xxxx - a simulator, written in C++/Qt/Qml.
simulator interface - more info soon
@end itemize
How to use each of the above is explained below in separate sections.

@section Stub 
Use this way if you want to run your program stand alone, with no way
of giving input to it. As soon as your program sets a pin you will see
a printout on stdout.

To build a stand alone stubed program set the following variables in
your @code{Makefile} (before you include @code{searduino.mk}):
@*
@code{ARDUINO=stub}
@*
@code{PROG=somename}
@*

Check out the example as found in
@code{example/python-digcounter}. Edit the Makefile
(@code{Makefile.digcounter}) and make sure to set the variables as
described above. After you're done, type:
@*
@code{make -f Makefile.digcounter clean}
@*
@code{make -f Makefile.digcounter}
@*
and possibly also
@*
@code{make -f Makefile.digcounter check}



@subsection Stub output syntax

With this mode set Searduino print messages to a stream (default to
stdout) for the function calls where some hardware is set. 
@*
@*
You switch on and off this mode as many times you want during execution using the functions:
@*
@code{void searduino_enable_streamed_output(void)}
@*
@code{void searduino_disable_streamed_output(void)}

@multitable  @columnfractions .0 .30 .20 .50
@item 
@tab @b{Directive}
@tab @b{Example}
@tab @b{Description}

@item
@tab @code{dpin:<pin>:<value>}
@tab @code{dpin:1:0}
@tab Digital output pin 1 is 0

@item
@tab @code{apin:<pin>:<value>}
@tab @code{apin:2:1.123}
@tab Analogue pin 2 is 1.123

@end multitable


@section Streamed simulator
With this mode you can enter commands to the Arduino code. To enable this code you have to call the function @code{void searduino_enable_command_reader(void)} before you call @code{void init_comm(void)}.

@b{THIS SECTION NEEDS TO BE UPDATED WITH INFO ON HOW TO MAKE STREAMED
SIM HAPPEN}

@subsection Streamed simulator input syntax

@multitable  @columnfractions .0 .30 .20 .50
@item 
@tab @b{Directive}
@tab @b{Example}
@tab @b{Description}

@item
@tab @code{dpin:<pin>:<value>}
@tab @code{dpin:13:1}
@tab Set digital pin 13 to 1

@item
@tab @code{apin:<pin>:<value>}
@tab @code{apin:7:1.123}
@tab Set analogue pin 7 to 1.123

@end multitable


@subsection Scripting with bash
@subsection Scripting over the network

@section Pardon simulator
With Searduino you can write test code for your Arduino program in
Python, for example with the Python simulator (written in Python using
Gtk). Searduino comes with a Python library for this. It doesn't take
much to set things up, but for now it's somewhat tricky.

First of all you must build your Arduino code as a shared library. To
do this you must set the following variables in your @code{Makefile}
(before you include @code{searduino.mk}):

@* 
@code{ARDUINO=stub} 
@*
@code{SHLIB=libarduino-code.so.0} 
@*
@*
@i{Note #1: The library must be called: libarduino-code.so.0}
@*
@i{Note #2: You must NOT have the variable PROG set}

After this you must do a clean build:

@code{make -f Makefile.digcounter clean}
@*
@code{make -f Makefile.digcounter}
@*
@*

Now, the shared library is ready for use by python. It's almost time
to start the simulator. But there's some few more things to do before
we're there. First, we must tell Python where to look for the
Searduino Python library called Pearduino. Using bash, as most do on
GNU/Linux, BSD, cygwin systems, you type:

@*
@code{export PYTHONPATH=/opt/searduino/lib}
@*
assuming you've installed Searduino in @i{/opt/searduino/}. 

@* 

Next thing to do is to make sure that your system can find all the
shared libraries. Type:

@*
@code{export LD_LIBRARY_PATH=.:/opt/searduino/lib}
@*
@*
@i{Note: there's a dot before the first semi colon}
By doing this we tell the system to look for libraries in the current
directory (@code{.}) and in @code{/opt/searduino/lib}, which is where
we assume you've installed searduino in.
@*

We're now ready to launch the simulator, but let's do a quick check
before we proceed. Let's verify that the dynamic loader will find all
the libraries needed by pearduino (Searduino's Python library). On
GNU/Linux and similar system do:
@*
@code{ldd /opt/searduino/lib/pearduino.so}
@*

We are, as before, assuming you've installed Searduino in
/opt/searduino. Ldd (a tool to print out dynamic link dependencies)
will print out a list of the libraries pearduino depends on. Make sure
that you see no printouts waring you of missing libraries (ldd reports
this by saying ``not found''). Also make sure that the
@code{libarduino.so.0} file ldd reports is the one you want to use.
@*
If this went ok, we're finally ready to proceed. Invoke pardon:
@*
@*
@code{/opt/searduino/bin/pardon}
@*



@section Python scripts

@section xxx simulator

@chapter Debugging Arduino code

@chapter Examples

@section Example Makefile
@*
@*
@code{SEARDUINO_PATH=/opt/searduino}
@*
@code{PROG=blinker}
@*
@code{SRC_C=blink.c}
@*
@code{SRC_CXX= stuff.cpp morestuff.cpp}
@*
@code{MAIN_SRC=main.c}
@*
@code{ARDUINO=stub}
@*
@code{$(PROG):}
@*
@code{upload:}
@*
@code{include $(SEARDUINO_PATH)/mk/searduino.mk}
@*
@section Example C code
@*
@*
@code{#include <Arduino.h>}
@*
@*
@code{int main(void)}
@*
@{
@*
@code{  for(;;)}
@*
@code{    }
@{
@*
@code{       digitalWrite(13, 1);}
@*
@code{       delay(100);}
@*
@code{       digitalWrite(13, 0);}
@*
@code{       delay(100);}
@*
@code{   }
@}
@*
@}
@*

@chapter Write your own simulator
@subsection Writing a simulator in C/C++ 



@subsection Writing local tests in Python
For now, we would like to refer to pardon in the Searduino source
treee for en example on how to write a simulator in Python.
@bye


