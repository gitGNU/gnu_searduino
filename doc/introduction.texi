Searduino is made to ease and speed up developing code for the Arduino
boards. In short, with Searduino you get

@itemize @bullet
@item C/C++ interface - use C/C++ to program your Arduino boards
@item Makefiles - easy to use Makefiles for inclusion in your project
@item Stand alone program - build your Arduino code to run on your
local computer instead
@item Simulators - run your Arduino code in a simulator to test it
@item Simulation API - write your own test cases in C/C++
@item Java simulation API - write your tests in Python
@item Arduino example import
@item Python simulation API - write your tests in Python (obsoleted)
@end itemize

@section C/C++ interface
With Searduino you can use your favorite Editor to develop your
program. Write plain C code and compile it either for any of the
Arduino boards or for your local computer.

@section Makefiles
Autobuild and test your code with no user interaction. Searduino comes
with Makefiles that makes it easy, and not much Makefile code from
you, to use the features of Searduino. Using a Makefile from an
example, shipped with Searduino, you should get started in just a few
seconds. 

The Makefiles come with support for: 
@itemize @bullet
@item compiling and linking for the Arduino boards
@item compiling and linking for the Arduino Simulator
@item compiling and linking for Stand alone programs
@item cleaning up
@item uploading code to the board
@end itemize

@section Stand alone program

Build for and run your arduino program on your local computer. Testing
code on the Arduino is tricky sometimes and it not easy to automate
these tests. Executing your program locally and looking the printouts
(write on the pins) make up a simple test. For more serious testing we
suggest you use the simulator (C or Python API or the GUI).

@section Simulator GUI
bladi 


@section Simulation API
bladi 

@section Python simulation API
write your tests in Python

@section Arduino example import

You can import Arduinon examples and turn them into Searduino projects
with Makefiles and everything set up for you. You can do this either
using the graphical simulator (@code{Jearduino}) or a script (@code{searduino-arduino-ex2c}).

Exampe on how to use the script:

@code{/opt/searduino/bin/searduino-arduino-ex2c --yes --shlib }
@*
@code{   --destination-dir /home/hesa/searduino/ }
@*
@code{   /usr/share/arduino/examples/01.Basics/Blink }
@*
@*




