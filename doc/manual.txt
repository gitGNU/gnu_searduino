Table of Contents
*****************

1 Background
2 Supported boards and platforms
3 Abbreviations
4 Building with Searduino
  4.1 Going through the digpins example
5 Building for Arduino boards
6 Building for PC
  6.1 Build with stubs only
    6.1.1 Preparing your Makefile
    6.1.2 Writing C/C++ code
    6.1.3 Building
    6.1.4 Executing
  6.2 Build with streamed input/output
    6.2.1 Preparing your Makefile
    6.2.2 Writing C/C++ code
    6.2.3 Building
    6.2.4 Executing
    6.2.5 Faking input
    6.2.6 Writing test scripts
  6.3 Build for Simulator
7 Write your own simulator
    7.0.1 Writing a simulator in C/C++
    7.0.2 Writing a simulator in Python


1 Background
************

bladi bladi .. Arduino bg bg bg

2 Supported boards and platforms
********************************

Supported Arduino boards
   * Uno - `http://arduino.cc/en/Main/arduinoBoardUno'

   * Mega - `http://arduino.cc/en/Main/ArduinoBoardMega'

   * Due - `http://arduino.cc/en/Main/arduinoBoardDuemilanove'

   Supported Operating Systems
   * GNU/Linux (source code supports both 32 and 64 bits. Binaries
     available for 32 bits only)

3 Abbreviations
***************

   * Arduino program - a program that is written for the Arduino board.
     Uses only the Arduio and avr APIs.

   * Arduino stub - library implementing the Arduino and avr APIs

   * Streamed input/output - instead of a fullblown simulator GUI
     Searduino provides you with a stdin/stdout interface. This can be
     used to script (bash, Python..) your test cases. Using programs
     such as netcat you can also run the Arduino program on one PC and
     the test on another PC.

4 Building with Searduino
*************************

4.1 Going through the digpins example
=====================================

5 Building for Arduino boards
*****************************

6 Building for PC
*****************

6.1 Build with stubs only
=========================

6.1.1 Preparing your Makefile
-----------------------------

6.1.2 Writing C/C++ code
------------------------

6.1.3 Building
--------------

6.1.4 Executing
---------------

6.2 Build with streamed input/output
====================================

6.2.1 Preparing your Makefile
-----------------------------

6.2.2 Writing C/C++ code
------------------------

6.2.3 Building
--------------

6.2.4 Executing
---------------

6.2.5 Faking input
------------------

6.2.6 Writing test scripts
--------------------------

6.3 Build for Simulator
=======================

7 Write your own simulator
**************************

7.0.1 Writing a simulator in C/C++
----------------------------------

7.0.2 Writing a simulator in Python
-----------------------------------

